// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  answer: (where?: AnswerWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  result: (where?: ResultWhereInput) => Promise<boolean>;
  resultSet: (where?: ResultSetWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  answer: (where: AnswerWhereUniqueInput) => AnswerNullablePromise;
  answers: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Answer>;
  answersConnection: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AnswerConnectionPromise;
  question: (where: QuestionWhereUniqueInput) => QuestionNullablePromise;
  questions: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Question>;
  questionsConnection: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuestionConnectionPromise;
  result: (where: ResultWhereUniqueInput) => ResultNullablePromise;
  results: (args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Result>;
  resultsConnection: (args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResultConnectionPromise;
  resultSet: (where: ResultSetWhereUniqueInput) => ResultSetNullablePromise;
  resultSets: (args?: {
    where?: ResultSetWhereInput;
    orderBy?: ResultSetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ResultSet>;
  resultSetsConnection: (args?: {
    where?: ResultSetWhereInput;
    orderBy?: ResultSetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResultSetConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnswer: (data: AnswerCreateInput) => AnswerPromise;
  updateAnswer: (args: {
    data: AnswerUpdateInput;
    where: AnswerWhereUniqueInput;
  }) => AnswerPromise;
  updateManyAnswers: (args: {
    data: AnswerUpdateManyMutationInput;
    where?: AnswerWhereInput;
  }) => BatchPayloadPromise;
  upsertAnswer: (args: {
    where: AnswerWhereUniqueInput;
    create: AnswerCreateInput;
    update: AnswerUpdateInput;
  }) => AnswerPromise;
  deleteAnswer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  deleteManyAnswers: (where?: AnswerWhereInput) => BatchPayloadPromise;
  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (args: {
    data: QuestionUpdateInput;
    where: QuestionWhereUniqueInput;
  }) => QuestionPromise;
  updateManyQuestions: (args: {
    data: QuestionUpdateManyMutationInput;
    where?: QuestionWhereInput;
  }) => BatchPayloadPromise;
  upsertQuestion: (args: {
    where: QuestionWhereUniqueInput;
    create: QuestionCreateInput;
    update: QuestionUpdateInput;
  }) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;
  createResult: (data: ResultCreateInput) => ResultPromise;
  updateResult: (args: {
    data: ResultUpdateInput;
    where: ResultWhereUniqueInput;
  }) => ResultPromise;
  upsertResult: (args: {
    where: ResultWhereUniqueInput;
    create: ResultCreateInput;
    update: ResultUpdateInput;
  }) => ResultPromise;
  deleteResult: (where: ResultWhereUniqueInput) => ResultPromise;
  deleteManyResults: (where?: ResultWhereInput) => BatchPayloadPromise;
  createResultSet: (data: ResultSetCreateInput) => ResultSetPromise;
  updateResultSet: (args: {
    data: ResultSetUpdateInput;
    where: ResultSetWhereUniqueInput;
  }) => ResultSetPromise;
  updateManyResultSets: (args: {
    data: ResultSetUpdateManyMutationInput;
    where?: ResultSetWhereInput;
  }) => BatchPayloadPromise;
  upsertResultSet: (args: {
    where: ResultSetWhereUniqueInput;
    create: ResultSetCreateInput;
    update: ResultSetUpdateInput;
  }) => ResultSetPromise;
  deleteResultSet: (where: ResultSetWhereUniqueInput) => ResultSetPromise;
  deleteManyResultSets: (where?: ResultSetWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  answer: (
    where?: AnswerSubscriptionWhereInput
  ) => AnswerSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  result: (
    where?: ResultSubscriptionWhereInput
  ) => ResultSubscriptionPayloadSubscription;
  resultSet: (
    where?: ResultSetSubscriptionWhereInput
  ) => ResultSetSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC";

export type Level = "BEGINNER" | "INTERMEDIATE" | "ADVANCED";

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "level_ASC"
  | "level_DESC"
  | "title_ASC"
  | "title_DESC"
  | "code_ASC"
  | "code_DESC";

export type ResultOrderByInput = "id_ASC" | "id_DESC";

export type ResultSetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "dateTime_ASC"
  | "dateTime_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AnswerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AnswerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  OR?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  NOT?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
}

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface QuestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  level?: Maybe<Level>;
  level_not?: Maybe<Level>;
  level_in?: Maybe<Level[] | Level>;
  level_not_in?: Maybe<Level[] | Level>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  answers_every?: Maybe<AnswerWhereInput>;
  answers_some?: Maybe<AnswerWhereInput>;
  answers_none?: Maybe<AnswerWhereInput>;
  correctAnswer?: Maybe<AnswerWhereInput>;
  AND?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  OR?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  NOT?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
}

export type ResultWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ResultWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  question?: Maybe<QuestionWhereInput>;
  answer?: Maybe<AnswerWhereInput>;
  AND?: Maybe<ResultWhereInput[] | ResultWhereInput>;
  OR?: Maybe<ResultWhereInput[] | ResultWhereInput>;
  NOT?: Maybe<ResultWhereInput[] | ResultWhereInput>;
}

export type ResultSetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ResultSetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  dateTime?: Maybe<DateTimeInput>;
  dateTime_not?: Maybe<DateTimeInput>;
  dateTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateTime_lt?: Maybe<DateTimeInput>;
  dateTime_lte?: Maybe<DateTimeInput>;
  dateTime_gt?: Maybe<DateTimeInput>;
  dateTime_gte?: Maybe<DateTimeInput>;
  results_every?: Maybe<ResultWhereInput>;
  results_some?: Maybe<ResultWhereInput>;
  results_none?: Maybe<ResultWhereInput>;
  AND?: Maybe<ResultSetWhereInput[] | ResultSetWhereInput>;
  OR?: Maybe<ResultSetWhereInput[] | ResultSetWhereInput>;
  NOT?: Maybe<ResultSetWhereInput[] | ResultSetWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface AnswerCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
}

export interface AnswerUpdateInput {
  text?: Maybe<String>;
}

export interface AnswerUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface QuestionCreateInput {
  id?: Maybe<ID_Input>;
  level?: Maybe<Level>;
  title: String;
  code: String;
  answers?: Maybe<AnswerCreateManyInput>;
  correctAnswer: AnswerCreateOneInput;
}

export interface AnswerCreateManyInput {
  create?: Maybe<AnswerCreateInput[] | AnswerCreateInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
}

export interface AnswerCreateOneInput {
  create?: Maybe<AnswerCreateInput>;
  connect?: Maybe<AnswerWhereUniqueInput>;
}

export interface QuestionUpdateInput {
  level?: Maybe<Level>;
  title?: Maybe<String>;
  code?: Maybe<String>;
  answers?: Maybe<AnswerUpdateManyInput>;
  correctAnswer?: Maybe<AnswerUpdateOneRequiredInput>;
}

export interface AnswerUpdateManyInput {
  create?: Maybe<AnswerCreateInput[] | AnswerCreateInput>;
  update?: Maybe<
    | AnswerUpdateWithWhereUniqueNestedInput[]
    | AnswerUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AnswerUpsertWithWhereUniqueNestedInput[]
    | AnswerUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  set?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  disconnect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  deleteMany?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  updateMany?: Maybe<
    | AnswerUpdateManyWithWhereNestedInput[]
    | AnswerUpdateManyWithWhereNestedInput
  >;
}

export interface AnswerUpdateWithWhereUniqueNestedInput {
  where: AnswerWhereUniqueInput;
  data: AnswerUpdateDataInput;
}

export interface AnswerUpdateDataInput {
  text?: Maybe<String>;
}

export interface AnswerUpsertWithWhereUniqueNestedInput {
  where: AnswerWhereUniqueInput;
  update: AnswerUpdateDataInput;
  create: AnswerCreateInput;
}

export interface AnswerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  OR?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  NOT?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
}

export interface AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput;
  data: AnswerUpdateManyDataInput;
}

export interface AnswerUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface AnswerUpdateOneRequiredInput {
  create?: Maybe<AnswerCreateInput>;
  update?: Maybe<AnswerUpdateDataInput>;
  upsert?: Maybe<AnswerUpsertNestedInput>;
  connect?: Maybe<AnswerWhereUniqueInput>;
}

export interface AnswerUpsertNestedInput {
  update: AnswerUpdateDataInput;
  create: AnswerCreateInput;
}

export interface QuestionUpdateManyMutationInput {
  level?: Maybe<Level>;
  title?: Maybe<String>;
  code?: Maybe<String>;
}

export interface ResultCreateInput {
  id?: Maybe<ID_Input>;
  question: QuestionCreateOneInput;
  answer?: Maybe<AnswerCreateOneInput>;
}

export interface QuestionCreateOneInput {
  create?: Maybe<QuestionCreateInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface ResultUpdateInput {
  question?: Maybe<QuestionUpdateOneRequiredInput>;
  answer?: Maybe<AnswerUpdateOneInput>;
}

export interface QuestionUpdateOneRequiredInput {
  create?: Maybe<QuestionCreateInput>;
  update?: Maybe<QuestionUpdateDataInput>;
  upsert?: Maybe<QuestionUpsertNestedInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionUpdateDataInput {
  level?: Maybe<Level>;
  title?: Maybe<String>;
  code?: Maybe<String>;
  answers?: Maybe<AnswerUpdateManyInput>;
  correctAnswer?: Maybe<AnswerUpdateOneRequiredInput>;
}

export interface QuestionUpsertNestedInput {
  update: QuestionUpdateDataInput;
  create: QuestionCreateInput;
}

export interface AnswerUpdateOneInput {
  create?: Maybe<AnswerCreateInput>;
  update?: Maybe<AnswerUpdateDataInput>;
  upsert?: Maybe<AnswerUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<AnswerWhereUniqueInput>;
}

export interface ResultSetCreateInput {
  id?: Maybe<ID_Input>;
  userId: ID_Input;
  dateTime: DateTimeInput;
  results?: Maybe<ResultCreateManyInput>;
}

export interface ResultCreateManyInput {
  create?: Maybe<ResultCreateInput[] | ResultCreateInput>;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
}

export interface ResultSetUpdateInput {
  userId?: Maybe<ID_Input>;
  dateTime?: Maybe<DateTimeInput>;
  results?: Maybe<ResultUpdateManyInput>;
}

export interface ResultUpdateManyInput {
  create?: Maybe<ResultCreateInput[] | ResultCreateInput>;
  update?: Maybe<
    | ResultUpdateWithWhereUniqueNestedInput[]
    | ResultUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ResultUpsertWithWhereUniqueNestedInput[]
    | ResultUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  set?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  disconnect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  deleteMany?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
}

export interface ResultUpdateWithWhereUniqueNestedInput {
  where: ResultWhereUniqueInput;
  data: ResultUpdateDataInput;
}

export interface ResultUpdateDataInput {
  question?: Maybe<QuestionUpdateOneRequiredInput>;
  answer?: Maybe<AnswerUpdateOneInput>;
}

export interface ResultUpsertWithWhereUniqueNestedInput {
  where: ResultWhereUniqueInput;
  update: ResultUpdateDataInput;
  create: ResultCreateInput;
}

export interface ResultScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
  OR?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
  NOT?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
}

export interface ResultSetUpdateManyMutationInput {
  userId?: Maybe<ID_Input>;
  dateTime?: Maybe<DateTimeInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  name: String;
  avatar?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
}

export interface AnswerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AnswerWhereInput>;
  AND?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  OR?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  NOT?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuestionWhereInput>;
  AND?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
  OR?: Maybe<QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput>;
  NOT?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
}

export interface ResultSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResultWhereInput>;
  AND?: Maybe<ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput>;
  OR?: Maybe<ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput>;
  NOT?: Maybe<ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput>;
}

export interface ResultSetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResultSetWhereInput>;
  AND?: Maybe<
    ResultSetSubscriptionWhereInput[] | ResultSetSubscriptionWhereInput
  >;
  OR?: Maybe<
    ResultSetSubscriptionWhereInput[] | ResultSetSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ResultSetSubscriptionWhereInput[] | ResultSetSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Answer {
  id: ID_Output;
  text: String;
}

export interface AnswerPromise extends Promise<Answer>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
}

export interface AnswerSubscription
  extends Promise<AsyncIterator<Answer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface AnswerNullablePromise
  extends Promise<Answer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
}

export interface AnswerConnection {
  pageInfo: PageInfo;
  edges: AnswerEdge[];
}

export interface AnswerConnectionPromise
  extends Promise<AnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerEdge>>() => T;
  aggregate: <T = AggregateAnswerPromise>() => T;
}

export interface AnswerConnectionSubscription
  extends Promise<AsyncIterator<AnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerEdge {
  node: Answer;
  cursor: String;
}

export interface AnswerEdgePromise extends Promise<AnswerEdge>, Fragmentable {
  node: <T = AnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerEdgeSubscription
  extends Promise<AsyncIterator<AnswerEdge>>,
    Fragmentable {
  node: <T = AnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswer {
  count: Int;
}

export interface AggregateAnswerPromise
  extends Promise<AggregateAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSubscription
  extends Promise<AsyncIterator<AggregateAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Question {
  id: ID_Output;
  level: Level;
  title: String;
  code: String;
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  level: () => Promise<Level>;
  title: () => Promise<String>;
  code: () => Promise<String>;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  correctAnswer: <T = AnswerPromise>() => T;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  level: () => Promise<AsyncIterator<Level>>;
  title: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  answers: <T = Promise<AsyncIterator<AnswerSubscription>>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  correctAnswer: <T = AnswerSubscription>() => T;
}

export interface QuestionNullablePromise
  extends Promise<Question | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  level: () => Promise<Level>;
  title: () => Promise<String>;
  code: () => Promise<String>;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  correctAnswer: <T = AnswerPromise>() => T;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Result {
  id: ID_Output;
}

export interface ResultPromise extends Promise<Result>, Fragmentable {
  id: () => Promise<ID_Output>;
  question: <T = QuestionPromise>() => T;
  answer: <T = AnswerPromise>() => T;
}

export interface ResultSubscription
  extends Promise<AsyncIterator<Result>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  question: <T = QuestionSubscription>() => T;
  answer: <T = AnswerSubscription>() => T;
}

export interface ResultNullablePromise
  extends Promise<Result | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  question: <T = QuestionPromise>() => T;
  answer: <T = AnswerPromise>() => T;
}

export interface ResultConnection {
  pageInfo: PageInfo;
  edges: ResultEdge[];
}

export interface ResultConnectionPromise
  extends Promise<ResultConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResultEdge>>() => T;
  aggregate: <T = AggregateResultPromise>() => T;
}

export interface ResultConnectionSubscription
  extends Promise<AsyncIterator<ResultConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResultEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResultSubscription>() => T;
}

export interface ResultEdge {
  node: Result;
  cursor: String;
}

export interface ResultEdgePromise extends Promise<ResultEdge>, Fragmentable {
  node: <T = ResultPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResultEdgeSubscription
  extends Promise<AsyncIterator<ResultEdge>>,
    Fragmentable {
  node: <T = ResultSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateResult {
  count: Int;
}

export interface AggregateResultPromise
  extends Promise<AggregateResult>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResultSubscription
  extends Promise<AsyncIterator<AggregateResult>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ResultSet {
  id: ID_Output;
  userId: ID_Output;
  dateTime: DateTimeOutput;
}

export interface ResultSetPromise extends Promise<ResultSet>, Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  dateTime: () => Promise<DateTimeOutput>;
  results: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ResultSetSubscription
  extends Promise<AsyncIterator<ResultSet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  dateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  results: <T = Promise<AsyncIterator<ResultSubscription>>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ResultSetNullablePromise
  extends Promise<ResultSet | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  dateTime: () => Promise<DateTimeOutput>;
  results: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ResultSetConnection {
  pageInfo: PageInfo;
  edges: ResultSetEdge[];
}

export interface ResultSetConnectionPromise
  extends Promise<ResultSetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResultSetEdge>>() => T;
  aggregate: <T = AggregateResultSetPromise>() => T;
}

export interface ResultSetConnectionSubscription
  extends Promise<AsyncIterator<ResultSetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResultSetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResultSetSubscription>() => T;
}

export interface ResultSetEdge {
  node: ResultSet;
  cursor: String;
}

export interface ResultSetEdgePromise
  extends Promise<ResultSetEdge>,
    Fragmentable {
  node: <T = ResultSetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResultSetEdgeSubscription
  extends Promise<AsyncIterator<ResultSetEdge>>,
    Fragmentable {
  node: <T = ResultSetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateResultSet {
  count: Int;
}

export interface AggregateResultSetPromise
  extends Promise<AggregateResultSet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResultSetSubscription
  extends Promise<AsyncIterator<AggregateResultSet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  name: String;
  avatar?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AnswerSubscriptionPayload {
  mutation: MutationType;
  node: Answer;
  updatedFields: String[];
  previousValues: AnswerPreviousValues;
}

export interface AnswerSubscriptionPayloadPromise
  extends Promise<AnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerPreviousValuesPromise>() => T;
}

export interface AnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerPreviousValuesSubscription>() => T;
}

export interface AnswerPreviousValues {
  id: ID_Output;
  text: String;
}

export interface AnswerPreviousValuesPromise
  extends Promise<AnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
}

export interface AnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  level: Level;
  title: String;
  code: String;
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  level: () => Promise<Level>;
  title: () => Promise<String>;
  code: () => Promise<String>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  level: () => Promise<AsyncIterator<Level>>;
  title: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
}

export interface ResultSubscriptionPayload {
  mutation: MutationType;
  node: Result;
  updatedFields: String[];
  previousValues: ResultPreviousValues;
}

export interface ResultSubscriptionPayloadPromise
  extends Promise<ResultSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResultPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResultPreviousValuesPromise>() => T;
}

export interface ResultSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResultSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResultSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResultPreviousValuesSubscription>() => T;
}

export interface ResultPreviousValues {
  id: ID_Output;
}

export interface ResultPreviousValuesPromise
  extends Promise<ResultPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface ResultPreviousValuesSubscription
  extends Promise<AsyncIterator<ResultPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface ResultSetSubscriptionPayload {
  mutation: MutationType;
  node: ResultSet;
  updatedFields: String[];
  previousValues: ResultSetPreviousValues;
}

export interface ResultSetSubscriptionPayloadPromise
  extends Promise<ResultSetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResultSetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResultSetPreviousValuesPromise>() => T;
}

export interface ResultSetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResultSetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResultSetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResultSetPreviousValuesSubscription>() => T;
}

export interface ResultSetPreviousValues {
  id: ID_Output;
  userId: ID_Output;
  dateTime: DateTimeOutput;
}

export interface ResultSetPreviousValuesPromise
  extends Promise<ResultSetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  dateTime: () => Promise<DateTimeOutput>;
}

export interface ResultSetPreviousValuesSubscription
  extends Promise<AsyncIterator<ResultSetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  dateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name: String;
  avatar?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Level",
    embedded: false
  },
  {
    name: "Question",
    embedded: false
  },
  {
    name: "Answer",
    embedded: false
  },
  {
    name: "Result",
    embedded: false
  },
  {
    name: "ResultSet",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
